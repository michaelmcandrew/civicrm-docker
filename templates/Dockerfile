### THIS FILE GENERATED BY https://github.com/michaelmcandrew/civicrm-docker/blob/master/generate.py ###

FROM php:<?php echo $vars['php'];?>-apache-bookworm

# libc-client-dev and libkrb5-dev required for the imap php extension
# libicu-dev required for the intl php extension
# libmagickwand-dev required for the imagick php extension
# libjpeg62-turbo-dev and libpng-dev required for the gd php extension
# libxml2-dev required for the soap php extension
# iproute2 is required to get the host ip at runtime for XDEBUG_REMOTE_HOST environment variable
# msmtp-mta allows us to globally redirect email via SMTP
# unzip is required for composer

RUN apt-get update \
  && apt-get install -y --no-install-recommends \
  imagemagick \
  iproute2 \
  less \
  libc-client-dev \
  libicu-dev \
  libjpeg62-turbo-dev \
  libkrb5-dev \
  libmagickwand-dev \
  libpng-dev \
  libxml2-dev \
  libzip-dev \
  msmtp-mta \
  mariadb-client \
  unzip \
  wget \
  && rm -r /var/lib/apt/lists/*

# CiviCRM requires the following PHP extensions (some of which are already
# enabled in the Docker image):
#
# * curl (already enabled)
# * gd
# * gettext
# * imagick
# * imap
# * intl
# * json (already enabled)
# * mbstring (already enabled)
# * mysqli
# * openssl (already enabled)
# * pdo_mysql
# * phar (already enabled)
# * posix (already enabled)
# * soap
# * zip

# WordPress recommends the following PHP extensions in addition to 
# the ones listed above:
#
# * dom (already enabled)
# * exif
# * fileinfo (already enabled)
# * hash (already enabled)
# * igbinary
# * imagick 
# * pcre (already enabled)
# * xml (already enabled)

# Configure and install php extensions (note configuration comes before installation)

RUN docker-php-ext-install bcmath \
  && docker-php-ext-configure gd --with-jpeg \
  && docker-php-ext-install gd \
  && docker-php-ext-install gettext \
  && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \
  && docker-php-ext-install imap \
  && docker-php-ext-install intl \
  && docker-php-ext-install mysqli \
  && docker-php-ext-install opcache \
  && docker-php-ext-install pdo_mysql \
  && docker-php-ext-install soap \
  && docker-php-ext-install zip

# Install and enable imagick PECL extensions

# Copy pasta from https://github.com/docker-library/wordpress/blob/3f1a0cab9f2f938bbc57f5f92ec11eeea4511636/latest/php8.3/fpm-alpine/Dockerfile#L47-L51
# Based on suggestion here: https://github.com/docker-library/php/issues/1532#issuecomment-2258777719
RUN curl -fL -o imagick.tgz 'https://pecl.php.net/get/imagick-3.7.0.tgz'; \
  echo '5a364354109029d224bcbb2e82e15b248be9b641227f45e63425c06531792d3e *imagick.tgz' | sha256sum -c -; \
  tar --extract --directory /tmp --file imagick.tgz imagick-3.7.0; \
  grep '^//#endif$' /tmp/imagick-3.7.0/Imagick.stub.php; \
  test "$(grep -c '^//#endif$' /tmp/imagick-3.7.0/Imagick.stub.php)" = '1'; \
  sed -i -e 's!^//#endif$!#endif!' /tmp/imagick-3.7.0/Imagick.stub.php; \
  grep '^//#endif$' /tmp/imagick-3.7.0/Imagick.stub.php && exit 1 || :; \
  docker-php-ext-install /tmp/imagick-3.7.0; \
  rm -rf imagick.tgz /tmp/imagick-3.7.0;

# Install igbinary PECL extension
RUN pecl install igbinary \
  && docker-php-ext-enable igbinary 

# Install xdebug PECL extension
RUN pecl install xdebug

# Install composer using the method described at https://getcomposer.org/download/ (TODO consider whether this is really necessary - we could remove from this image)
RUN EXPECTED_SIGNATURE="$(curl https://composer.github.io/installer.sig)" \
  && php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" \
  && ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")" \
  && if [ "$EXPECTED_SIGNATURE" != "${ACTUAL_SIGNATURE}" ]; then >&2 echo 'ERROR: Invalid installer signature'; rm composer-setup.php; exit 1; fi \
  && php composer-setup.php --install-dir=/usr/local/bin --filename=composer \
  && rm composer-setup.php

# Create civicrm user

RUN useradd civicrm --home-dir /home/civicrm --create-home 

RUN chown -R civicrm:civicrm /var/www 

ENV APACHE_RUN_USER=civicrm

ENV APACHE_RUN_GROUP=civicrm

USER civicrm

# TODO: I think we only use cgr for drush. If we can find another way to install drush, then we can remove this dependency.
RUN composer global require --ignore-platform-req php consolidation/cgr

USER root

# Download cv

RUN curl -LsS https://download.civicrm.org/cv/cv.phar -o /usr/local/bin/cv \
  && chmod +x /usr/local/bin/cv

# Download civix

RUN curl -LsS https://download.civicrm.org/civix/civix.phar -o /usr/local/bin/civix \
  && chmod +x /usr/local/bin/civix

# Configure apache

RUN a2enmod expires headers remoteip rewrite

COPY ./apache.conf /etc/apache2/conf-available/civicrm.conf

RUN a2enconf civicrm

COPY ./apache-sites-available-default.conf /etc/apache2/sites-available/000-default.conf

# Configure php

RUN cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini

COPY ./civicrm-docker-load /usr/local/bin

COPY ./civicrm_dump.php /usr/local/src/civicrm_dump.php

RUN mkdir /usr/local/etc/civicrm

# Install msmtp wrapper

COPY ./msmtp-wrapper /usr/local/bin/msmtp-wrapper

ENTRYPOINT [ "civicrm-docker-entrypoint" ]

CMD ["apache2-foreground"]

<?php include $vars['cms'] . '.Dockerfile' ?>

# Configure mysqldump

COPY ./.my.cnf /home/civicrm/.my.cnf
